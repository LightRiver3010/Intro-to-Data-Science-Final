#Testing File
install.packages("tidyverse")
install.packages("ggplot2")
library(tidyverse)
library(ggplot2)
install.packages("gganimate")
library(gganimate)
install.packages("Lahman")
library(Lahman)
install.packages("gifski")
library(gifski)
install.packages("gapminder")
library(gapminder)
head(gapminder)
library(palmerpenguins)
theme_set(theme_gray())

#Testing Animated Graphs

#1 - Animated Scatter Plot
p <- ggplot(
  gapminder,
  aes(x= gdpPercap, y=lifeExp, size=pop, color=country) 
) +
  geom_point(show.legend=FALSE, alpha=0.7) +
  scale_color_viridis_d() +
  scale_size(range=c(2,12)) +
  scale_x_log10() +
  labs(x="GDP per capital", y="Life expectancy") +
  transition_time(year) +
  labs(title = "Year: {frame_time}") +
  ease_aes('linear') +
  shadow_wake(wake_length = 0.1, alpha =FALSE)

animate(p, renderer = gifski_renderer())

df <- gapminder
df

df1 <- df |>
  filter(continent == 'Asia')

afg <- df1 |>
  filter(country == 'Afghanistan')

#2 - Animated Line Graph
g <- ggplot(
  df1,
  aes(x=year, y=lifeExp, group = country)
) +
  geom_line() +
  scale_color_viridis_b() +
  labs(x= "Year", y= "Life Expectancy") +
  geom_point() +
  transition_reveal(year)

g


#Making my own with Penguins
install.packages("palmerpenguins")
penguins <- palmerpenguins::penguins
penguins

y <- ggplot(
  penguins,
  aes(flipper_length_mm, body_mass_g, color=bill_depth_mm) 
) +
  geom_point() +
  transition_time(flipper_length_mm) +
  ease_aes('linear')

animate(y, renderer = gifski_renderer())

y




#Testing File
install.packages("tidyverse")
install.packages("ggplot2")
library(tidyverse)
library(ggplot2)
install.packages("gganimate")
library(gganimate)
install.packages("Lahman")
library(Lahman)
install.packages("gifski")
library(gifski)
install.packages("gapminder")
library(gapminder)
head(gapminder)
library(palmerpenguins)
theme_set(theme_gray())

#Testing Animated Graphs

#1 - Animated Scatter Plot
p <- ggplot(
  gapminder,
  aes(x= gdpPercap, y=lifeExp, size=pop, color=country) 
) +
  geom_point(show.legend=FALSE, alpha=0.7) +
  scale_color_viridis_d() +
  scale_size(range=c(2,12)) +
  scale_x_log10() +
  labs(x="GDP per capital", y="Life expectancy") +
  transition_time(year) +
  labs(title = "Year: {frame_time}") +
  ease_aes('linear') +
  shadow_wake(wake_length = 0.1, alpha =FALSE)

animate(p, renderer = gifski_renderer())

df <- gapminder
df

df1 <- df |>
  filter(continent == 'Asia')

afg <- df1 |>
  filter(country == 'Afghanistan')

#2 - Animated Line Graph
g <- ggplot(
  df1,
  aes(x=year, y=lifeExp, group = country)
) +
  geom_line() +
  scale_color_viridis_b() +
  labs(x= "Year", y= "Life Expectancy") +
  geom_point() +
  transition_reveal(year)

g


#Making my own with Penguins
install.packages("palmerpenguins")
penguins <- palmerpenguins::penguins
penguins

y <- ggplot(
  penguins,
  aes(flipper_length_mm, body_mass_g, color=bill_depth_mm) 
) +
  geom_point() +
  transition_time(flipper_length_mm) +
  ease_aes('linear')

animate(y, renderer = gifski_renderer())

y




#Actual Coding File

#Importing the necessities 
library(tidyverse)
library(ggplot2)
install.packages("gganimate")
library(gganimate)
theme_set(theme_bw())
install.packages("Lahman")
library(Lahman)
install.packages("gifski")
library(gifski)
install.packages("readxl")
library("readxl")
install.packages('dplyr')
library(dplyr)
install.packages("plotly")
library(plotly)

#Importing the data
#(School PC Version):
df <- read_excel("C:/Users/jsavaryn/Downloads/IndiaDepressionV2.xlsx")
#(Laptop Version):
#df <- read_excel("C:/Users/savar/Testing/Coding/R/IndiaDepressionV2.xlsx")

#Fixing up some columns 
df <- rename(df, 'Student Id' = 'id')
glimpse(df)
colnames(df)
df$'Work/Study Hours' <- as.numeric(df$'Work/Study Hours')
df$'Work/Study Hours'
df$Region <- as.numeric(df$Region)
df$Region
glimpse(df)
df <- df |>
  rename('Study Hours' = `Work/Study Hours`)
df
df <- df |>
  filter(CGPA > 4.5)

#Binning the Data
#GPA
df <- df |>
  mutate(GPA = cut(CGPA, breaks=c(5,6,7,8,9,10)))
glimpse(df)
#Age
min(df$Age)
max(df$Age)
df <- df |>
  mutate(Ages = cut(Age, breaks=c(17, 20, 25, 30, 35, 40, 45, 50, 55, 60)))
print(df$Ages)
#Gender
df <- df |>
  mutate(Gender_bin = ifelse(Gender == 0, "Male", "Female"))
df$Gender_bin
#Depression
df <- df |>
  mutate(Depression_bin = ifelse(Depression == 0, "True", "False"))
df$Depression_bin


#Making animated graphs
#Plot 1 (Interactable)
p <- df |>
  group_by(State, Ages,`Study Hours`, Depression) |>
  summarize(
    Depression_present = ifelse(sum(Depression) >= (count(Depression)/2))
  ) |>
  ggplot(aes(GPA, `Study Hours`, fill=Ages)) +
  geom_tile(color="white",
            lwd=1.5,
            linetype=1) +
  scale_fill_binned(
    guide = guide_colorbar(
      barwidth = 1,
      barheight = 15,
      title.position="top",
      title.hjust=0.5,
      label.position="right",
      direction="vertical",
      ticks.linewidth=1
    )
  ) +
  scale_fill_brewer(palette = "Purples", direction = 1) +
  theme_minimal() +
  scale_x_discrete(labels=c('5.5', '6.5', '7.5', 
                            '8.5', '9.5'), expand=c(0.04,0)) +
  labs(
    title = "GPA vs. Study Hours of Indian Students",
    x = "GPA",
    y= "# of hours studied daily",
    key = "Age Group"
  ) +
  theme (
    #Almost all of these lines are from AI. I was having lots of trouble
    #alligning the title, legend, and overall presentation of the graph.
    legend.position="right",
    legend.justification = "left",
    legend.margin = margin(0,0,0,0),
    legend.box.spacing= unit(0.1, "cm"),
    axis.title = element_text(size=12),
    axis.text = element_text(margin=margin(t=0, r=10, b=0, l=0)),
    plot.margin = margin(t=0, r=0, b=0, l=10),
    plot.title = element_text(face="bold", color="purple2", size=15, vjust = 55)
  )
ggplotly(p)

#Plot 2 (Animated)
p <- df |>
  group_by(State) |>
  summarize(
    Avg_GPA = mean(CGPA, na.rm = TRUE),
    Avg_Academic_Pressure = mean(`Academic Pressure`, na.rm = TRUE)
  ) |>
  ggplot(aes(Avg_GPA, State, fill = Avg_Academic_Pressure)) +
  geom_col() +
  geom_text(aes(label =round(Avg_GPA, 2)), hjust = -0.2, color="orchid1") +
  scale_x_continuous(limits = c(0, max(8.5))) +
  scale_fill_distiller(palette = "Purples", direction = 1,
                       name = "Average\nAcademic\nPressure") +
  labs(
    x = "Average GPA",
    y = "State"
  ) +
  ggtitle("Average GPA per Indian State") +
  theme_minimal() +
  theme (
    plot.title=element_text(face="bold",hjust=0.8, vjust=-0.5, color="orchid1", size = 30),
    plot.background = element_rect(fill = "darkorchid4"),
    panel.grid = element_blank(),
    #panel.grid.major.y = element_line(color= "white"),
    panel.ontop = TRUE,
    axis.title.y = element_text(size = 20, color = "orchid1"),
    axis.text.y = element_text(size = 13, color = "orchid1"),
    axis.title.x = element_text(size=20, color="orchid1"),
    axis.text.x=element_text(size=13, color="orchid1"),
    legend.title = element_text(size = 15, color = "orchid1"),
    legend.text = element_text(size=10, color="orchid1"),
  ) +
  transition_states(State, wrap = FALSE) +
  shadow_mark() +
  enter_grow() +
  enter_fade()
p

#Plot 2 (Static)
p <- df |>
  group_by(State) |>
  summarize(
    Avg_GPA = mean(CGPA, na.rm = TRUE),
    Avg_Academic_Pressure = mean(`Academic Pressure`, na.rm = TRUE)
  ) |>
  ggplot(aes(Avg_GPA, State, fill = Avg_Academic_Pressure)) +
  geom_col() +
  geom_text(aes(label =round(Avg_GPA, 2)), hjust = -0.2, color="orchid1") +
  scale_x_continuous(limits = c(0, max(8.5))) +
  scale_fill_distiller(palette = "Purples", direction = 1,
                       name = "Average\nAcademic\nPressure") +
  labs(
    x = "Average GPA",
    y = "State"
  ) +
  ggtitle("Average GPA per Indian State") +
  theme_minimal() +
  theme (
    plot.title=element_text(face="bold",hjust=.8, color="orchid1", size = 30),
    plot.background = element_rect(fill = "darkorchid4"),
    panel.grid = element_blank(),
    #panel.grid.major.y = element_line(color= "white"),
    panel.ontop = TRUE,
    axis.title.y = element_text(size = 20, color = "orchid1"),
    axis.text.y = element_text(size = 13, color = "orchid1"),
    axis.title.x = element_text(size=20, color="orchid1"),
    axis.text.x=element_text(size=13, color="orchid1"),
    legend.title = element_text(size = 15, color = "orchid1"),
    legend.text = element_text(size=10, color="orchid1"),
  ) +
  geom_vline(xintercept = 1, color = "white", linetype=3, size =0.5) +
  geom_vline(xintercept = 2, color = "white", linetype=3, size =0.5) +
  geom_vline(xintercept = 3, color = "white", linetype=3, size =0.5) +
  geom_vline(xintercept = 4, color = "white", linetype=3, size =0.5) +
  geom_vline(xintercept = 5, color = "white", linetype=3, size =0.5) +
  geom_vline(xintercept = 6, color = "white", linetype=3, size =0.5) +
  geom_vline(xintercept = 7, color = "white", linetype=3, size =0.5) 
p

#The end!
